<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Behavior Interview Tips</title>
      <link href="/behavior-interview-tips/"/>
      <url>/behavior-interview-tips/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://www.1point3acres.com/bbs/thread-558755-1-1.html" target="_blank" rel="noopener">拿狗家,微软,亚麻offer的教程</a></strong><br>Behaviour:<br>1.事先练习，总结模型。 具体参照cc150里面的模版。 这个也要练习</p><ol start="2"><li>背下几个Example, 后面可以build 别的答案在这个上面</li><li>最好不要瞎编， 楼主当时就遇到一个interviwer要楼主解释具体细节</li></ol><p>面试篇：<br>楼主在一篇post里面回答过，楼主在这里再回答一次。 面试过程 具体步骤如下：</p><ol><li>确认题目， 多问问interviewer到底想要的是什么， 问问input的条件和限制， output的条件和限制 （这个特别重要）</li><li>开始brainstorm,  给brute force solution （很重要！）</li><li>优化brute force solution, 给出为什么， 然后怎么做</li><li>记得问interviewer “Am I on the right track? Would you mind if I start implementing the solution?”， 这样你们两个都在同一page上面， 可以确认interviewer理解你在说什么， 如果这个时候interviewer不理解， 你可以问为什么， 需不需要进一步解释</li><li>确认interviewer满意你的solution再开始implement (这个特别重要！因为这个是面试， 你需要给的是interviewer要的东西，而不是你想要什么)</li><li>implement 完了之后 自己主动要求过一遍example code 确认没Bug</li><li>过完一遍后， 再核对 edge cases那些 该怎么handle</li><li>最后结束</li></ol><p>怎么和面试官互动自然？没有思路时的冷场期间该说什么呢？一些tips:</p><ol><li>记得所有的解释只需要high level即可， 不要每写一个line of code就解释， 这样会很混乱。</li><li>全程think out loud, 写modular 的code (就是尽量把你的logic放到一个个helper function里面， 这样也更清晰）</li><li>对于helper function, 先写placeholder， 然后和interviewer说这个function做什么， 不要急着implement。 然后接着implement主干部分。 先把主干部分写完再来implement小的helper function.</li><li>没有思路的时候， 看看input给了什么条件， 从bruth force出发。 如果想不出brute force, 可以问一下hint (正常情况下， 你态度好一点的话，interviewer都会给hint的， 毕竟他们考验的东西不只problem solving 一个)</li><li>补充一下 一个特别好的想法是把你的interviewer当做你的coworker，想想自己有问题卡住的时候怎么像coworker求助 （你会把自己的想法说出来， 但是觉得这个地方 或者那个地方卡住了， 然后问coworker是怎么想的， 然后你based on 他的idea 继续往下想）</li></ol><h2 id="Phone-interview-process"><a href="#Phone-interview-process" class="headerlink" title="Phone interview process:"></a>Phone interview process:</h2><ul><li>Introduce each other, write down the important information, team for future questions, keep self-intro under 2min</li><li>Coding, comment, test cases, big-O</li><li>After coding: ask questions based on previous info, express interests in interviewer, tech, this company</li></ul><h3 id="How-to-approach-a-technical-question"><a href="#How-to-approach-a-technical-question" class="headerlink" title="How to approach a technical question:"></a>How to approach a technical question:</h3><ol><li>Ask clarifying questions and high-level discussion</li><li>Choose your approach and start coding<br>“I think … way is a good solution, so let me start with coding that.”<br>“I think the … solution is good, should I try to start coding with that?”<br>Communicate with the interviewer and making sure you are in the right direction</li></ol><ul><li>Define function header, explain input and output of the function.<br>“For example, …”<br>“This is necessary because …”</li><li>Start writing the solution as you explain your code</li><li>Thinking with specific example in your mind when writing code might be helpful</li></ul><ol start="3"><li>Test your solution and discuss complexity</li></ol><ul><li>Walk through the code line by line, using a few examples and make sure it works</li><li>Write a few comments and also write the time and space complexity! Since the interviewer is not the only person who views your code</li></ul><h3 id="Interview-tips-from-current-FB-Google-engineers"><a href="#Interview-tips-from-current-FB-Google-engineers" class="headerlink" title="Interview tips from current FB/Google engineers:"></a>Interview tips from current FB/Google engineers:</h3><ol><li><p>They are interested in how well you collaborate with the interviewer<br>Regard the interviewer as your colleague, they don’t know how to solve this problem and ask you.<br>Ask more, communicate more<br>“Should <strong>we</strong> try to do blabla?”<br>“What do you think about this?”<br>“How do you like this solution?”</p></li><li><p>Besides your technical skills, it’s important to impress the interviewer<br>Think about it: Do you want to spend 40hrs with this person every week?</p></li><li><p>Treat every interview seriously in the same way! </p></li><li><p>Don’t be sad if you didn’t do well in one round, since the interviewers are different in every round</p></li></ol><p><strong><a href="https://www.1point3acres.com/bbs/thread-434430-8-1.html" target="_blank" rel="noopener">谷歌bar猜想</a></strong><br>层主的沟通如何：<br>1.有没有做细致的假设，把小数、正负数、special chatacter、重复情况排除，有没有确定题目range下来，有没有将corner case分类。<br>2.有没有仔细解释你的方法的每一个细节，有没有确保面试官没有误会，有没有确保你写出来的bug free 不是你所想的bug free 最优解，而是面试官认同的bug free 最优解（很多面试官都没有见过他们出的题目在leetcode上的最优解，他们有自己的最优解并且可能和蠡口的不一样，或者说他们就算见过了，也希望你能更多的解释）。</p><p>层主的代码易读性、简洁性怎么样：<br>1.做出来没什么，代码的简洁性还是能把人和人拉开比较大的差距，杂乱无章的代码，会和你处理事情的方式挂上等号，进而影响你的feedback比如（面试者虽然做出来了，但是用了一个复杂的代码结构）<br>2.易读性怎么样，命名是否都方便理解。 有没有把sub-method都分离出来。如果面试官觉得读你的代码费力，给的评价自然也不会太高，进而影响你的feedback比如（没有看到industrial级别的code，代码易读性不高）</p><p>层主最后多这道题给出了几种做法：<br>1.如果直接最优解，并不是加分点哈（更重要的是分析的过程）。</p><p>层主的题目里几道medium 几道 hard：<br>1.如果单纯是easy 或者medium一道，对面试官来说feedback非常难写，有时候太简单也不是一件好事，挂在这个点上也有可能。<br>2.如果题目太简单，楼主是否有及时做自我调整，加速进度冲一冲medium或hard呢（如果发现题目是简单题）。</p><h3 id="Here-are-some-interview-tips-for-myself-before-amp-after-going-to-GHC"><a href="#Here-are-some-interview-tips-for-myself-before-amp-after-going-to-GHC" class="headerlink" title="Here are some interview tips for myself before&amp;after going to GHC:"></a>Here are some interview tips for myself before&amp;after going to GHC:</h3><ul><li><a href="https://medium.com/@sundas.khalid6/10-things-to-do-before-ghc19-4ad6bfd0089d#GHC19%20https://events.withgoogle.com/ghc-connect/" target="_blank" rel="noopener">10 Things to Do Before #GHC19</a></li><li>Check <a href="https://docs.google.com/spreadsheets/d/1Yh8BrVza72Z5zvQ1P8ezI1kB1_d3pXMFbiaEPge7-Y4/edit?usp=sharing" target="_blank" rel="noopener">Grace Hopper Exhibitors</a></li><li>Practice Your Elevator Pitch<h4 id="1-Who-are-you-What-do-you-do"><a href="#1-Who-are-you-What-do-you-do" class="headerlink" title="1. Who are you? What do you do?"></a>1. Who are you? What do you do?</h4><h4 id="2-Why-should-they-care"><a href="#2-Why-should-they-care" class="headerlink" title="2. Why should they care?"></a>2. Why should they care?</h4></li></ul><ul><li>Something specific&amp;interesting, something sets you apart from everybody else who’s doing what you’re doing</li><li>What makes you different? Unique project?<h4 id="3-What-do-you-want-Why-are-you-telling-them"><a href="#3-What-do-you-want-Why-are-you-telling-them" class="headerlink" title="3. What do you want? Why are you telling them?"></a>3. What do you want? Why are you telling them?</h4></li><li>What are you looking for? Why are you interviewing? What’s important for you to find in your next position?</li><li>Why you want THIS job? What you are targeting in your job research</li><li>Sounds like you want a challenge</li></ul><blockquote><p>Unfortunately, we do not wish to continue with the interview process.</p></blockquote><blockquote><p>*”Candidate did well on interview question. Pleasant individual, easy to<br>get along with. She hit a few stumbling blocks on some of the details but<br>eventually was able to solve the problem with a little guidance.”*</p></blockquote><blockquote><p>*”Lu doesn’t have enough understanding of basic data structures like array<br>and hash. She tried to use hash to do what an array does and it ended up<br>very awkward. Same with concepts of encapsulation. Her encapsulations are<br>also exposing internal implementation. We didn’t get too far into coding<br>question.”*</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java Basics Summary</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Here I will write down some key concepts about Java when I read Head First Java.<br>Notes written by others: <a href="https://archerimagine.wordpress.com/notes-of-book/head-first-java/" target="_blank" rel="noopener">link</a></p><p>9.16</p><h3 id="1-Dive-in-a-Quick-Dip"><a href="#1-Dive-in-a-Quick-Dip" class="headerlink" title="1 Dive in a Quick Dip"></a>1 Dive in a Quick Dip</h3><p>How java works:<br>Source –&gt; Compiler –&gt; Output –&gt; Virtual Machine</p><p>A Java program/application only has one main method</p><h3 id="2-Classes-and-Objects"><a href="#2-Classes-and-Objects" class="headerlink" title="2 Classes and Objects"></a>2 Classes and Objects</h3><p><strong>Inheritance:</strong> “Square inherits from Shape.” The Shape class is called the superclass of the other four classes. The other four classes are the subclasses of Shape, inheriting the methods of the superclass.</p><p><strong>Overriding:</strong> a subclass refines one of its inherited methods when it needs to change/extend the behavior of that method.</p><p><strong>Instance variables:</strong> things an object knows about itself; represent state(data), can have unique values for each object of that type.</p><p><strong>Method:</strong> things an object can do.</p><p><strong>Class:</strong> a blueprint for an object. Tell VM how to make an object of that particular type.</p><p>Dot operator (.): access to state/instance var and behavior/methods.</p><p><strong>main:</strong> test real class; launch/start Java app</p><p><strong>(Garbage Collection) Heap:</strong> where the created object is stored. Java allocates memory space on the heap according to how much that particular created object needs.</p><h3 id="3-Primitives-and-References"><a href="#3-Primitives-and-References" class="headerlink" title="3 Primitives and References"></a>3 Primitives and References</h3><p><strong>primitives:</strong> hold fundamental values – int (32 bits), boolean, float (32 bits), char(16 bits), double (64 bits), byte (8 bits), short (16 bits), long (64 bits)</p><p><strong>object references:</strong> hold references to objects</p><p>Variables must have a type and name.</p><pre><code>float f = 32.5f; // Java think anything with a floating point is a double, so add &#39;f&#39;</code></pre><p>Name: start with a letter/_/$ not number; no use of reserved words</p><pre><code>Dog myDog = new Dog(); // declare a reference variable, create an object, link them</code></pre><p>Arrays are always objects, whether they are declared to hold primitives/object references.</p><h3 id="4-Methods-Use-Instance-Variables"><a href="#4-Methods-Use-Instance-Variables" class="headerlink" title="4 Methods Use Instance Variables"></a>4 Methods Use Instance Variables</h3><p>A method uses parameters. A caller passes arguments.</p><p>Java is pass-by-value, which means it pass-by-copy.</p><ol><li>int is one of the 8 basic variables, and int[] is reference variable.</li><li>In a Java method, method arguments(MA) are passed by by value.</li><li>if basic variables are in MA, the value is copied, and the initial variable remain unchanged.</li><li>if reference variable is in MA, the address is copied (and passed as value), and the initial variable will be changed.</li></ol><h3 id="7-Inheritance-and-Polymorphism"><a href="#7-Inheritance-and-Polymorphism" class="headerlink" title="7 Inheritance and Polymorphism"></a>7 Inheritance and Polymorphism</h3><p>Polymorphism example: <code>Animal myDog = new Dog();</code><br>The reference variable type is declared as Animal, but the object is. created as <code>new Dog()</code>.<br>With polymorphism, the reference type can be a superclass of the actual object type.</p><pre class=" language-java"><code class="language-java">Animal<span class="token punctuation">[</span><span class="token punctuation">]</span> animals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>animals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Make a class <code>private</code>: if you need security<br>Make a method/class <code>final</code>: protect a specific method from being overridden; want to guarantee that none of the methods in that class will ever be overridden.</p><p><strong>Overriding rules:</strong></p><ol><li>arguments must be the same, and return types must be compatible</li><li>the method can’t be less accessible</li></ol><p><strong>Overloading rules:</strong></p><ol><li>return types can be different</li><li>cannot change only the return type (also change the argument list)</li><li>can vary the access levels in any direction</li></ol><h3 id="8-Interfaces-and-Abstract-Classes"><a href="#8-Interfaces-and-Abstract-Classes" class="headerlink" title="8 Interfaces and Abstract Classes"></a>8 Interfaces and Abstract Classes</h3><p><strong>Abstract class:</strong></p><ol><li>has no body</li><li>if declare an abstract method, must also mark the class abstract</li><li>good for: polymorphism, inheritable method implementations</li><li>concrete class must implement all abstract methods (like overriding)</li></ol><p>Every class in Java extends class Object.<br><strong>Interface:</strong> all methods are abstract</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Pet</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Canine</span> <span class="token keyword">implements</span> <span class="token class-name">Pet</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>Encapsulation</p><p>Mark instance variables private, mark getters and setter public.</p><p>The signed left shift operator “&lt;&lt;” shifts a bit pattern to the left<br>The signed right shift operator “&gt;&gt;” shifts a bit pattern to the right.<br>The unsigned right shift operator “&gt;&gt;&gt;” shifts a zero into the leftmost position</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/String.html" target="_blank" rel="noopener">String</a></h2><p><strong>Commonly used methods:</strong> charAt, indexOf, length, split, toCharArray, trim, replaceAll, compareTo, equals, startsWith, endsWith, toLowerCase, toUpperCase, valueOf</p><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> pets <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// they are the same</span>String str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// more examples</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String cde <span class="token operator">=</span> <span class="token string">"cde"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span> <span class="token operator">+</span> cde<span class="token punctuation">)</span><span class="token punctuation">;</span>String c <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String d <span class="token operator">=</span> cde<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">"cares"</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// returns "caress"</span> <span class="token string">"to"</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"her"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// returns "together"</span></code></pre><h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html" target="_blank" rel="noopener">Maps</a></h2><p><strong>Common methods:</strong> Map.Entry&lt;K,V&gt;, containsKey, getOrDefault, isEmpty, keySet, putIfAbsent, remove, replace, size, entrySet</p><h3 id="HashMap-TreeMap-LinkedHashMap-Hashtable"><a href="#HashMap-TreeMap-LinkedHashMap-Hashtable" class="headerlink" title="HashMap, TreeMap, LinkedHashMap, Hashtable"></a>HashMap, TreeMap, LinkedHashMap, Hashtable</h3><p>HashMap is implemented as a hash table, and there is no ordering on keys or values. HashMap doesn’t allow two identical elements (same key+value, but same key different values is fine!).<br>TreeMap is implemented based on red-black tree structure, and it is ordered by the key. A TreeMap is sorted by keys.<br>LinkedHashMap preserves the insertion order. LinkedHashMap is a subclass of HashMap. That means it inherits the features of HashMap. In addition, the linked list preserves the insertion-order.<br>Hashtable is synchronized, in contrast to HashMap.<br>From Java Doc:  The HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits nulls. </p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a><a href="https://docs.oracle.com/javase/9/docs/api/java/util/Set.html" target="_blank" rel="noopener">Set</a></h2><p><strong>Common methods:</strong> add, contains, isEmpty, remove, toArray, size</p><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p><strong>Common methods:</strong> first, last</p><h2 id="Priority-Queue-with-custom-comparator"><a href="#Priority-Queue-with-custom-comparator" class="headerlink" title="Priority Queue with custom comparator"></a><a href="https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html" target="_blank" rel="noopener">Priority Queue</a> with custom comparator</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// not necessary to specify the capacity</span>PriorityQueue<span class="token operator">&lt;</span>Node<span class="token operator">></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span>Node<span class="token operator">></span><span class="token punctuation">(</span>initCapacity<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Node<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Node n1<span class="token punctuation">,</span> Node n2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// type should be consistent</span>        <span class="token comment" spellcheck="true">// compare n1 and n2</span>        <span class="token keyword">return</span> str1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// return s1-s2;</span>        <span class="token comment" spellcheck="true">// return s1[0]-s2[0];</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Using lambda expression</span>PriorityQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// max heap    </span>PriorityQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> pqInt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    </code></pre><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a><a href="https://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="noopener">Scanner</a></h2><pre class=" language-java"><code class="language-java">Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// int i = sc.nextInt();</span>    <span class="token comment" spellcheck="true">// do more things</span><span class="token punctuation">}</span> sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html" target="_blank" rel="noopener">StringBuilder</a></h2><p><strong>Commonly used methods:</strong> append, charAt, delete, deleteCharAt, length, reverse, toString, setLength, substring, setCharAt, insert</p><pre class=" language-java"><code class="language-java">StringBuilder str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"AAAABBBCCCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String = "</span><span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// print string </span>StringBuilder reverseStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// reverse the string </span></code></pre><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html" target="_blank" rel="noopener">Arrays</a></h2><p><strong>Commonly used methods:</strong> asList, binarySearch, sort, equals, fill, toString</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
